<?xml version="1.0" encoding="UTF-8"?>
<project name="commons">
  <property name="commons.parent.uri"
            value="https://raw.github.com/neo-technology/build-scripts/master"/>
  <script language="javascript">
    <![CDATA[
    var commonsXML = project.getProperty("ant.file.commons");
    if (project.getProperty("ant.file.type.commons") === "url") {
       if (commonsXML.substring(0,5) === "file:") {
         project.setNewProperty("commons.xml", commonsXML);
         commonsXML = commonsXML.substring(5);
       }
    } else {
      project.setNewProperty("commons.xml", commonsXML);
    }
    ]]>
  </script>

  <target name="-commons bootstrap" if="commons.xml">
    <!-- save this file locally for faster access next run -->
    <local name="parent.dir"/>
    <dirname property="parent.dir" file="${commons.xml}"/>
    <mkdir dir="${parent.dir}"/>
    <get src="${commons.parent.uri}/commons.xml" dest="${commons.xml}"
         skipexisting="yes"/>
  </target>

  <target name="define-module-paths">
    <path id="internal.module.classpath" />
  </target>
  
  <target name="setup" depends="define-module-paths, -pre-setup">
    <!-- Define properties required by common build, unless already defined -->

    <property name="compilation.target" value="1.5"/>
    <!-- project information -->
    <property name="project.group" value="${ant.project.name}"/>
    <property name="project.name" value="${ant.project.name}"/>
    <property name="project.version" value="SNAPSHOT"/>
    <!-- source directories -->
    <property name="source.main.java" value="src/main/java" />
    <property name="generated.main.java" value="target/generated-sources/java" />
    <property name="source.test.java" value="src/test/java" />
    <property name="generated.test.java" value="target/generated-test-sources/java" />
    <!-- target directories -->
    <property name="target.dir" location="target"/>
    <property name="test.reports" location="${target.dir}/test-reports"/>
    <property name="main.target.tmpdir" location="${target.dir}/classes"/>
    <property name="test.target.tmpdir" location="${target.dir}/test-classes"/>
    <!-- artifacts -->
    <property name="main.jar.name"
              value="${project.name}-${project.version}.jar"/>
    <property name="test.jar.name"
              value="${project.name}-${project.version}-test.jar"/>
    <property name="main.src.jar.name"
              value="${project.name}-${project.version}-sources.jar"/>
    <property name="test.src.jar.name"
              value="${project.name}-${project.version}-test-sources.jar"/>
    <property name="main.jar" location="${target.dir}/${main.jar.name}"/>
    <property name="test.jar" location="${target.dir}/${test.jar.name}"/>
    <property name="main.src.jar"
	      location="${target.dir}/${main.src.jar.name}"/>
    <property name="test.src.jar"
	      location="${target.dir}/${test.src.jar.name}"/>
    <!-- create target directories -->
    <mkdir dir="${target.dir}"/>
    <!-- define classpaths -->
    <path id="thirdparty.compile.classpath"/>
    <path id="build.classpath">
      <path refid="thirdparty.compile.classpath"/>
      <path refid="internal.module.classpath"/>
    </path>
    <path id="runtime.classpath"><path refid="build.classpath"/></path>
    <path id="thirdparty.test.classpath"/>
    <path id="test.classpath">
      <path refid="thirdparty.test.classpath"/>
      <path refid="runtime.classpath"/>
    </path>
  </target>

  <macrodef name="using">
    <attribute name="lib"/>

    <sequential>
      <local name="cache.root"/><local name="cache.root.suggestion"/>
      <dirname property="cache.root.suggestion" file="${commons.xml}"/>
      <condition property="cache.root" value="${cache.root.suggestion}">
        <isset property="commons.xml"/>
      </condition>
      <local name="download.uri"/><local name="target.file"/>
      <condition property="download.uri" value="${commons.parent.uri}/@{lib}.xml"
                 else=""><!-- empty to not download -->
        <isset property="cache.root"/>
      </condition>
      <condition property="target.file" value="${cache.root}/@{lib}.xml"
                 else=""><!-- empty to not download -->
        <isset property="cache.root"/>
      </condition>
      <mkdir dir="${cache.root}"/>
      <get src="${download.uri}" dest="${target.file}"
           ignoreerrors="yes" usetimestamp="yes"/>
      <local name="uri"/>
      <condition property="uri" value="file:${cache.root}/@{lib}.xml"
                 else="${remote.root}/@{lib}.xml">
        <isset property="cache.root"/>
      </condition>
      <import><url url="${uri}"/></import>
    </sequential>
  </macrodef>

  <macrodef name="appenddir">
    <attribute name="to"/>
    <attribute name="dir"/>
    <sequential>
      <local name="path"/>
      <pathconvert refid="@{to}" property="path"/>
      <path id="@{to}">
	<pathelement path="${path}"/>
	<pathelement location="@{dir}"/>
      </path>
    </sequential>
  </macrodef>

  <macrodef name="compile">
    <attribute name="jar"/>
    <attribute name="srcjar"/>
    <attribute name="source"/>
    <attribute name="genSource"/>
    <element name="class-path"/>
    <element name="manifest-data" optional="yes"/>
    <element name="include-files" optional="yes"/>

    <sequential>
      <local name="target.tmp"/><local name="compilation.failure"/>
      <property name="target.tmp" location="@{jar}-classes"/>
      <mkdir dir="${target.tmp}"/>
      <mkdir dir="@{source}"/>
      <mkdir dir="@{genSource}"/>

      <javac failonerror="false" errorProperty="compilation.failure"
             destdir="${target.tmp}" debug="on" debuglevel="lines,vars,source"
             target="${compilation.target}" includeantruntime="false">
        <src path="@{source}"/>
        <src path="@{genSource}"/>
        <classpath><class-path/></classpath>
      </javac>

      <jar jarfile="@{jar}">
        <fileset dir="${target.tmp}"/>
        <zipfileset dir="${basedir}" prefix="META-INF/">
          <filename name="README.*"/>
          <filename name="LICENSE.txt"/><!-- license for this project -->
          <filename name="NOTICE.txt"/><!-- licenses for dependencies -->
        </zipfileset>
        <fileset dir="@{source}" excludes="**/*.java"/>
        <fileset dir="@{genSource}" excludes="**/*.java"/>
        <resources>
          <include-files/>
        </resources>
        <manifest>
          <attribute name="Specification-Title" value="${project.name}"/>
          <attribute name="Specification-Version" value="${project.version}"/>
          <attribute name="Specification-Vendor" value="${project.group}"/>
          <attribute name="Implementation-Title" value="${project.name}"/>
          <attribute name="Implementation-Version" value="${project.version}"/>
          <attribute name="Implementation-Vendor" value="${project.group}"/>

          <manifest-data/>
        </manifest>
      </jar>

      <jar jarfile="@{srcjar}">
        <zipfileset dir="${basedir}" prefix="META-INF/">
          <filename name="README.*"/>
          <filename name="LICENSE.txt"/><!-- license for this project -->
	        <filename name="NOTICE.txt"/><!-- licenses for dependencies -->
	      </zipfileset>
        <fileset dir="@{source}"/>
        <fileset dir="@{genSource}"/>
      </jar>
      <delete dir="${target.tmp}"/>
      <fail message="compilation failed" if="${compilation.failure}"/>
    </sequential>
  </macrodef>

  <macrodef name="test">
    <attribute name="jar"/>
    <element name="class-path"/>

    <sequential>
      <mkdir dir="${test.reports}"/>
      <local name="failure"/>
      <junit printsummary="no" fork="yes" forkmode="once"
             failureproperty="failure">
        <classpath>
	  <class-path/>
          <pathelement location="@{jar}"/>
        </classpath>
        <formatter type="xml"/>
        <batchtest todir="${test.reports}">
          <zipfileset src="@{jar}">
            <include name="**/*Test.class"/>
            <include name="**/Test*.class"/>
            <exclude name="**/*$*"/>
          </zipfileset>
        </batchtest>
      </junit>
      <fail message="Test failure" if="failure"/>
    </sequential>
  </macrodef>

  <extension-point name="-post-setup" depends="setup"/>

  <target name="clean" depends="-post-setup">
    <delete dir="${target.dir}"/>
  </target>

  <extension-point name="-pre-setup" depends="-commons bootstrap"/>
  <!-- setup depends -pre-setup -->
  <extension-point name="-pre-build" depends="-post-setup"/>
  
  <target name="build" depends="-pre-build">
    <compile jar="${main.jar}" srcjar="${main.src.jar}" source="${source.main.java}" genSource="${generated.main.java}">
      <class-path>
        <path refid="build.classpath"/>
      </class-path>
    </compile>
  </target>

  <extension-point name="-pre-build-test" depends="build"/>

  <target name="build-test" depends="build,-pre-build-test">
    <compile jar="${test.jar}" srcjar="${test.src.jar}" source="${source.test.java}" genSource="${generated.test.java}">
      <class-path>
        <path refid="test.classpath"/>
        <pathelement location="${main.jar}"/>
      </class-path>
    </compile>
  </target>

  <extension-point name="-pre-test" depends="build-test"/>

  <target name="test" depends="-pre-test">
    <test jar="${test.jar}">
      <class-path>
        <path refid="test.classpath"/>
        <pathelement location="${main.jar}"/>
      </class-path>
    </test>
  </target>

  <extension-point name="complete" depends="test"/>
</project>