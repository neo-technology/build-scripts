<?xml version="1.0" encoding="utf-8"?>
<project xmlns:aether="antlib:org.sonatype.aether.ant" name="aether">
  <sequential>
    <local name="build"/>
    <dirname property="build" file="${commons.xml}"/>
    <condition property="aether.jar" value="${build}/aether.jar">
      <isset property="commons.xml"/>
    </condition>
    <fail unless="aether.jar"
	  message="Could not find location to put aether.jar"/>
  </sequential>

  <target name="clean aether">
    <delete file="${aether.jar}"/>
  </target>

  <target name="-aether get">
    <get src="${commons.parent.uri}/aether.jar"
         dest="${aether.jar}" usetimestamp="true" ignoreerrors="true"/>
    <condition property="aether.available">
      <available file="${aether.jar}" type="file"/>
    </condition>
    <local name="message"/>
    <condition property="message" value="aether found"
               else="Could not download pre-built aether, will build aether">
      <isset property="aether.available"/>
    </condition>
    <echo message="${message}"/>
  </target>

  <target name="-aether build" depends="-aether get" unless="aether.available">
    <local name="gh.org"/><local name="gh.repo"/>
    <property name="gh.org" value="neo-technology"/>
    <property name="gh.repo" value="aether-ant-tasks"/>
    <local name="commit"/><!-- get the latest commit -->
    <script language="javascript">
      <![CDATA[
      var reader = new java.io.BufferedReader(
      new java.io.InputStreamReader(
        new java.net.URL(
          "https://api.github.com/repos/" + project.getProperty("gh.org")
          + "/" + project.getProperty("gh.repo")
          + "/commits?page=0&per_page=1").openStream()));
      var data=""; var line;
      while ((line = reader.readLine()) != null) {
        data += line;
      }
      project.setProperty("commit",eval("("+data+")")[0]["sha"]);
      ]]>
    </script>
    <local name="build.dir"/><local name="aether.target.dir"/>
    <dirname property="build.dir" file="${aether.jar}"/>
    <property name="aether.target.dir" location="${build.dir}/tmp-aether-tmp"/>
    <mkdir dir="${aether.target.dir}"/>
    <get src="https://github.com/${gh.org}/${gh.repo}/zipball/${commit}"
         dest="${build.dir}/aether.zip"/>
    <unzip src="${build.dir}/aether.zip" dest="${aether.target.dir}"/>
    <local name="aether.unpack.dir"/>
    <pathconvert property="aether.unpack.dir">
      <dirset dir="${aether.target.dir}"
              includes="*-aether-ant-*"/>
    </pathconvert>
    <local name="mvn.settings.xml"/>
    <property name="mvn.settings.xml"
	      location="${aether.target.dir}/settings.xml"/>
    <echo file="${mvn.settings.xml}"><![CDATA[
<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
	  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	  xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
			      http://maven.apache.org/xsd/settings-1.0.0.xsd">
  <profiles>
    <profile>
      <activation><activeByDefault>true</activeByDefault></activation>
      <repositories>
	<repository>
	  <id>sonatype-nexus-snapshots</id>
	  <url>https://oss.sonatype.org/content/repositories/snapshots</url>
	  <releases><enabled>false</enabled></releases>
	  <snapshots><enabled>true</enabled></snapshots>
	</repository>
      </repositories>
    </profile>
  </profiles>
</settings>
]]></echo>
    <local name="mvn.res"/>
    <exec executable="mvn" dir="${aether.unpack.dir}" resultproperty="mvn.res"
          failifexecutionfails="no" failonerror="no">
      <arg value="--settings"/><arg value="${mvn.settings.xml}"/>
      <arg value="clean"/>
      <arg value="package"/>
      <arg value="dependency:copy-dependencies"/>
    </exec>
    <local name="mvn.fail"/>
    <condition property="mvn.fail">
      <or>
        <not><isset property="mvn.res"/></not>
        <isfailure code="${mvn.res}"/>
      </or>
    </condition>
    <fail if="mvn.fail" message="Failed to bootstrap aether"/>
    <jar jarfile="${aether.jar}" filesetmanifest="merge">
      <zipgroupfileset dir="${aether.unpack.dir}/target"
                       includes="aether-ant-tasks-*-uber.jar"/>
      <manifest>
        <attribute name="GitHub-Commit-SHA" value="${commit}"/>
      </manifest>
    </jar>
    <delete dir="${aether.target.dir}"/>
    <delete file="${build.dir}/aether.zip"/>
  </target>

  <target name="-aether setup" depends="-aether build" extensionOf="-pre-setup">
    <taskdef uri="antlib:org.sonatype.aether.ant"
             resource="org/sonatype/aether/ant/antlib.xml">
      <classpath location="${aether.jar}"/>
    </taskdef>
    <property name="pom.xml" value="pom.xml"/>
    <aether:pom file="${pom.xml}" id="pom"/>
    <property name="project.group" value="${pom.groupId}"/>
    <property name="project.name" value="${pom.artifactId}"/>
    <property name="project.version" value="${pom.version}"/>

    <aether:remoterepo id="aether.repo.neo4j"
            url="http://m2.neo4j.org/content/repositories/everything"
            releases="true" snapshots="true" checksums="fail"/>
  </target>

  <target name="-aether local" if="aether.repo" depends="-aether setup">
    <local name="local.repo.dir"/>
    <property name="local.repo.dir" location="${aether.repo}"/>
    <aether:localrepo dir="${local.repo.dir}"/>
  </target>

  <target name="-aether install" if="project.install.target"
	  depends="-aether setup">
    <local name="local.repo.path"/>
    <property name="local.repo.path" location="${project.install.target}"/>
    <aether:remoterepo id="aether.repo.local" url="file:${local.repo.path}"
		       releases="true" snapshots="true" checksums="fail"/>
    <aether:remoterepos id="aether.repos">
      <aether:remoterepo refid="aether.repo.local"/>
      <aether:remoterepo refid="aether.repo.neo4j"/>
    </aether:remoterepos>
  </target>

  <target name="-aether no install" unless="project.install.target"
	  depends="-aether setup">
    <aether:remoterepos id="aether.repos">
      <aether:remoterepo refid="aether.repo.neo4j"/>
    </aether:remoterepos>
  </target>

  <target name="-aether repos"
   depends="-aether setup,-aether local,-aether install,-aether no install"/>

  <target name="-aether dependencies" depends="-aether repos"
          extensionOf="-pre-build">
    <path id="transitive.main.classpath"/>
    <path id="transitive.test.classpath"/>
    <aether:resolve transitive="false">
      <aether:remoterepos refid="aether.repos"/>
      <aether:dependencies pomRef="pom"/>
      <aether:path refid="main.classpath" classpath="compile"/>
      <aether:path refid="test.classpath" classpath="test"/>
    </aether:resolve>
    <aether:resolve transitive="true">
      <aether:remoterepos refid="aether.repos"/>
      <aether:dependencies pomRef="pom"/>
      <aether:path refid="transitive.main.classpath" classpath="compile"/>
      <aether:path refid="transitive.test.classpath" classpath="test"/>
    </aether:resolve>
    <local name="main.ok"/><local name="test.ok"/>
    <condition property="main.ok">
      <equals arg1="${toString:transitive.main.classpath}"
              arg2="${toString:main.classpath}"/>
    </condition>
    <must-be-equal-paths path1="transitive.main.classpath"
			 path2="main.classpath"/>
    <must-be-equal-paths path1="transitive.test.classpath"
			 path2="test.classpath"/>
  </target>

  <macrodef name="must-be-equal-paths">
    <attribute name="path1"/>
    <attribute name="path2"/>
    <sequential>
      <local name="sep"/><local name="ok"/>
      <local name="one"/><local name="two"/>
      <property name="sep" value="${line.separator}  "/>
      <pathconvert property="one" pathsep="${sep}" refid="@{path1}"/>
      <pathconvert property="two" pathsep="${sep}" refid="@{path2}"/>
      <condition property="ok">
	<equals arg1="${one}" arg2="${two}"/>
      </condition>
      <fail unless="ok" message="Paths do not match${line.separator}= @{path1} =${sep}${one}${line.separator}= @{path2} =${sep}${two}"/>
    </sequential>
  </macrodef>

  <target name="package" depends="test" extensionOf="complete">
    <aether:artifacts id="packaging">
      <artifact file="${main.jar}"/>
      <artifact file="${main.src.jar}" classifier="sources"/>
      <artifact file="${test.jar}" classifier="tests"/>
    </aether:artifacts>
  </target>

  <target name="install" depends="package" if="project.install.target"
	  extensionOf="complete">
    <mkdir dir="${project.install.target}"/>
    <!--aether:localrepo dir="${project.install.target}"/>
    <aether:install artifactsref="packaging"/-->
    <aether:deploy artifactsref="packaging">
      <aether:remoterepo refid="aether.repo.local"/>
      <aether:snapshotrepo refid="aether.repo.local"/>
    </aether:deploy>
  </target>

</project>
